import{_ as s,c as i,o as a,V as n}from"./chunks/framework.6DK9nIBo.js";const E=JSON.parse('{"title":"NGINX 配置SSL HTTPS","description":"","frontmatter":{},"headers":[],"relativePath":"webdev/nginx-ssl配置.md","filePath":"webdev/nginx-ssl配置.md"}'),l={name:"webdev/nginx-ssl配置.md"},e=n(`<h1 id="nginx-配置ssl-https" tabindex="-1">NGINX 配置SSL HTTPS <a class="header-anchor" href="#nginx-配置ssl-https" aria-label="Permalink to &quot;NGINX 配置SSL HTTPS&quot;">​</a></h1><h2 id="_443配置" tabindex="-1">443配置 <a class="header-anchor" href="#_443配置" aria-label="Permalink to &quot;443配置&quot;">​</a></h2><p>在nginx中使用openssl是一个常见的选择，用于提供安全的数据传输和SSL/TLS加密。以下是在nginx中使用openssl的一些常见配置和使用方法：</p><ol><li>安装OpenSSL： 首先，确保你的系统上已经安装了OpenSSL。在大多数Linux发行版中，可以使用包管理器来安装OpenSSL。例如，在Ubuntu上可以使用以下命令安装：</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> install openssl</span></span></code></pre></div><ol start="2"><li>生成SSL证书和私钥： 要使用SSL/TLS加密，你需要生成一个有效的SSL证书和私钥。你可以自己生成自签名的证书，或者从受信任的证书颁发机构（CA）获取证书。以下是使用openssl生成自签名证书的示例：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssl.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssl.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span></span></code></pre></div><p>这将生成一个名为<code>ssl.key</code>的私钥文件和一个名为<code>ssl.crt</code>的证书文件。 3. 配置Nginx： 在nginx的配置文件中，你需要将HTTPS协议设置为默认的监听协议，并为HTTP请求重定向到HTTPS。打开nginx的配置文件（通常位于<code>/etc/nginx/nginx.conf</code>或<code>/etc/nginx/conf.d/default.conf</code>），并进行如下修改：</p><div class="language-perl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ...其他配置项...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 80;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::]:80;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server_name example.com;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为你的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 301 https://$host$request_uri;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重定向HTTP到HTTPS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 443 ssl http2;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听HTTPS请求</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::]:443 ssl http2;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听HTTPS请求（IPv6）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server_name example.com;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为你的域名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_certificate /path/to/ssl.crt;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定SSL证书路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_certificate_key /path/to/ssl.key;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定私钥路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # ...其他配置项...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>确保将<code>/path/to/ssl.crt</code>和<code>/path/to/ssl.key</code>替换为你实际生成的证书和私钥文件的路径。此外，还需要将<code>server_name</code>替换为你的域名。 4. 检查配置并重启Nginx： 在完成配置更改后，确保检查nginx的配置文件是否正确无误，然后重新启动nginx以使更改生效。在终端中运行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 检查配置语法是否正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 重新启动nginx服务</span></span></code></pre></div><p>现在，你的nginx服务器应该已经配置好使用openssl提供安全的HTTPS服务了。</p><h2 id="_8080端口配置" tabindex="-1">8080端口配置 <a class="header-anchor" href="#_8080端口配置" aria-label="Permalink to &quot;8080端口配置&quot;">​</a></h2><p>要将Nginx的HTTPS服务修改为使用8080端口，你需要在配置文件中进行相应的更改。找到Nginx配置文件中与HTTPS相关的<code>server</code>块，然后进行以下修改：</p><div class="language-perl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8080 ssl http2;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听8080端口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::]:8080 ssl http2;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听IPv6的8080端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server_name example.com;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为你的域名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ssl_certificate /path/to/ssl.crt;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定SSL证书路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ssl_certificate_key /path/to/ssl.key;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定私钥路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ...其他配置项...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将<code>listen</code>指令中的端口号<code>443</code>修改为<code>8080</code>，同时确保将<code>/path/to/ssl.crt</code>和<code>/path/to/ssl.key</code>替换为你实际的证书和私钥文件路径。保存配置文件后，重新启动Nginx服务：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 检查配置语法是否正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 重新启动nginx服务</span></span></code></pre></div><p>现在，你的Nginx服务器将使用8080端口提供HTTPS服务。</p>`,18),t=[e];function p(h,k,d,r,c,g){return a(),i("div",null,t)}const y=s(l,[["render",p]]);export{E as __pageData,y as default};
