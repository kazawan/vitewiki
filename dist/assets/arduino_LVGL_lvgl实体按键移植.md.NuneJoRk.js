import{_ as s,c as i,o as a,V as n}from"./chunks/framework.6DK9nIBo.js";const g=JSON.parse('{"title":"lvgl 实体按键移植","description":"","frontmatter":{},"headers":[],"relativePath":"arduino/LVGL/lvgl实体按键移植.md","filePath":"arduino/LVGL/lvgl实体按键移植.md"}'),l={name:"arduino/LVGL/lvgl实体按键移植.md"},h=n(`<h1 id="lvgl-实体按键移植" tabindex="-1">lvgl 实体按键移植 <a class="header-anchor" href="#lvgl-实体按键移植" aria-label="Permalink to &quot;lvgl 实体按键移植&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这个是实体按键使用编码器方式操作 分别要使用3个按键 NEXT,PREV,ENTER</p></div><h2 id="lv-port-indev-文件" tabindex="-1"><code>lv_port_indev</code> 文件 <a class="header-anchor" href="#lv-port-indev-文件" aria-label="Permalink to &quot;\`lv_port_indev\` 文件&quot;">​</a></h2><p>复制 <code>lvgl/examples/porting</code> 下的 <code>lv_port_indev_template.c</code> 和 <code>lv_port_indev_template.h</code> 到 <code>lib</code> 目录下</p><h2 id="修改-lv-port-indev-h-文件-include" tabindex="-1">修改 <code>lv_port_indev.h</code> 文件 <code>#include</code> <a class="header-anchor" href="#修改-lv-port-indev-h-文件-include" aria-label="Permalink to &quot;修改 \`lv_port_indev.h\` 文件 \`#include\`&quot;">​</a></h2><p><code>#if 0</code> 改为 <code>#if 1</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lvgl.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Arduino.h&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用arduino 所以使用这个头文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;driver/gpio.h&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用esp32 所以使用这个头文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;button.h&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用实体按键所以使用这个头文件</span></span></code></pre></div><p>把 <code>#ifdef cplusplus</code> 所有相关删掉</p><h2 id="修改-lv-port-indev-c-文件" tabindex="-1">修改 <code>lv_port_indev.c</code> 文件 <a class="header-anchor" href="#修改-lv-port-indev-c-文件" aria-label="Permalink to &quot;修改 \`lv_port_indev.c\` 文件&quot;">​</a></h2><p><code>#if 0</code> 改为 <code>#if 1</code></p><p>修改文件名 <code>lv_port_indev.c</code> 为 <code>lv_port_indev.cpp</code></p><p>保留编码器相关的部分 其他部分删掉</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoder_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoder_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_indev_drv_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">indev_drv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_indev_data_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoder_handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_indev_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">indev_encoder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder_diff;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器差值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lv_indev_state_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder_state;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 状态</span></span></code></pre></div><h2 id="encoder-init" tabindex="-1"><code>encoder_init</code> <a class="header-anchor" href="#encoder-init" aria-label="Permalink to &quot;\`encoder_init\`&quot;">​</a></h2><p>添加你自己的初始化方法</p><h2 id="encoder-read-部分说明" tabindex="-1"><code>encoder_read</code> 部分说明 <a class="header-anchor" href="#encoder-read-部分说明" aria-label="Permalink to &quot;\`encoder_read\` 部分说明&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_encoder_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 上次编码器值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoder_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_indev_drv_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">indev_drv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_indev_data_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // gpio_num_t gpio_num = (gpio_num_t)NEXT_BTN;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // if(gpio_get_level(gpio_num) != 1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    encoder_value--;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // data-&gt;enc_diff = encoder_value - last_encoder_value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // last_encoder_value = encoder_value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    button_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NEXT_BTN_OBJ);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用实体按键扫描</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> btn_State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NEXT_BTN_OBJ);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取实体按键状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RELEASE )</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 松开</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        encoder_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器值减一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NEXT_BTN_OBJ.BUTTON_STATE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDLE;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 实体按键状态置为空闲</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        encoder_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器值不变</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟编码器旋转 1格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data-&gt;enc_diff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_encoder_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器差值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last_encoder_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编码器值赋值给编码器值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>data-&gt;enc_diff</code> 是编码器差值 按下按键后模拟的是编码器旋转1格</p>`,18),t=[h];function e(p,k,d,r,c,E){return a(),i("div",null,t)}const y=s(l,[["render",e]]);export{g as __pageData,y as default};
